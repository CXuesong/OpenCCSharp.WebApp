{"version":3,"file":"15.index.js","mappings":"oHAAA,IAAIA,EAEGC,eAAeC,IACpB,MAAM,KAAEC,EAAI,cAAEC,EAAa,WAAEC,SAAqB,kCAClD,OAAQD,KACN,KAAKC,EAAWC,QACd,OAAON,EAAc,WACnB,UACQG,I,QAENH,OAAcO,IAJG,GAOvB,KAAKF,EAAWG,OACd,OACF,QACE,OAAOR,GAMNC,eAAeQ,EAAeC,EAAaC,EAAgCC,SAC1EV,IACN,MAAM,YAAEW,SAAsB,kCACxBC,QAAeD,EAAYE,OAAOC,QAAQC,wBAAwBP,EAAKC,EAAMC,GACnF,GAAc,MAAVE,EAAgB,MAAM,IAAII,MAAM,cAAcP,QAAWC,MAC7D,OAAOE,EAGFb,eAAekB,EAA6BR,EAAgCC,SAC3EV,IACN,MAAM,YAAEW,SAAsB,kCAC9B,OAAOA,EAAYE,OAAOC,QAAQI,sBAAsBT,EAAMC,GAGzDX,eAAeoB,UACdnB,IACN,MAAM,YAAEW,SAAsB,kCAE9B,OAAOA,EAAYE,OAAOC,QAAQM,oB","sources":["webpack://OpenCCSharp.WebApp/./src/services/conversion.ts"],"sourcesContent":["let bootPromise: Promise<void> | undefined;\n\nexport async function ensureInitialized() {\n  const { boot, getBootStatus, BootStatus } = await import(\"managed/dotnet\");\n  switch (getBootStatus()) {\n    case BootStatus.Standby:\n      return bootPromise = (async () => {\n        try {\n          await boot();\n        } finally {\n          bootPromise = undefined;\n        }\n      })();\n    case BootStatus.Booted:\n      return;\n    default:\n      return bootPromise!;\n  }\n}\n\nexport type ChineseConversionVariant = \"Hans\" | \"Hant\" | \"HK\" | \"TW\" | \"Kyujitai\" | \"Shinjitai\";\n\nexport async function convertVariant(str: string, from: ChineseConversionVariant, to: ChineseConversionVariant): Promise<string> {\n  await ensureInitialized();\n  const { OpenCCSharp } = await import(\"managed/dotnet\");\n  const result = await OpenCCSharp.WebApp.Managed.TryConvertStringVariant(str, from, to);\n  if (result == null) throw new Error(`指定的转换对不受支持：${from} -> ${to}。`);\n  return result;\n}\n\nexport async function isVariantConversionSupported(from: ChineseConversionVariant, to: ChineseConversionVariant): Promise<boolean> {\n  await ensureInitialized();\n  const { OpenCCSharp } = await import(\"managed/dotnet\");\n  return OpenCCSharp.WebApp.Managed.IsConversionSupported(from, to);\n}\n\nexport async function getManagedLibVersions(): Promise<Record<string, string>> {\n  await ensureInitialized();\n  const { OpenCCSharp } = await import(\"managed/dotnet\");\n  // HACK Dictionary<> is incorrectedly mapped to Map<> (should be Record).\n  return OpenCCSharp.WebApp.Managed.GetVersionNumbers() as unknown as Record<string, string>;\n}\n"],"names":["bootPromise","async","ensureInitialized","boot","getBootStatus","BootStatus","Standby","undefined","Booted","convertVariant","str","from","to","OpenCCSharp","result","WebApp","Managed","TryConvertStringVariant","Error","isVariantConversionSupported","IsConversionSupported","getManagedLibVersions","GetVersionNumbers"],"sourceRoot":""}